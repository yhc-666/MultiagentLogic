[{
    "id": "001",
    "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
    "question": "If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Juan is assigned to locker 4.",
      "B) Juan is assigned to locker 5.",
      "C) Paul is assigned to locker 2.",
      "D) Rachel is assigned to locker 2.",
      "E) Rachel is assigned to locker 5."
    ],
    "LP": [
      "# Declarations\nchildren = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([children] -> [lockers])\nshared = Function([lockers] -> [bool])\n\n# Constraints\nForAll([c:children], And(1 <= assigned(c), assigned(c) <= 5)) ::: each child must be assigned to exactly one locker\nForAll([l:lockers], And(0 <= shared(l), shared(l) <= 1)) ::: each locker must be assigned to either one or two children\nForAll([l:lockers], Implies(shared(l), And(Exists([g:girls], assigned(g) == l), Exists([b:boys], assigned(b) == l)))) ::: each shared locker must be assigned to one girl and one boy\nForAll([c:children], Implies(assigned(c) == 3, c == Fred)) ::: Fred must be assigned to locker 3\nForAll([c:children], Implies(assigned(c) == 1, c == Marc)) ::: Marc alone is assigned to locker 1\nForAll([c1:children, c2:children], Implies(assigned(c1) == assigned(c2), c1 == c2)) ::: each child must be assigned to exactly one locker\nForAll([l1:lockers, l2:lockers], Implies(shared(l1) == shared(l2), l1 == l2)) ::: each locker must be assigned to either one or two children\n\nNot(Exists([c:children], And(assigned(Trisha) == 3, assigned(Marc) == 1, assigned(Juan) == 4))) ::: If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1\n\n# Options\nQuestion ::: If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true?\nis_valid(assigned(Juan) == 4) ::: (A)\nis_valid(assigned(Juan) == 5) ::: (B)\nis_valid(assigned(Paul) == 2) ::: (C)\nis_valid(assigned(Rachel) == 2) ::: (D)\nis_valid(assigned(Rachel) == 5) ::: (E)"
    ],
    "FOL": [
      "Predicates:\nPerform(x) ::: x performs in school talent shows often.\nAttend(x) ::: x attends and is very engaged with school events.\nInactive(x) ::: x is an inactive and disinterested member of their community.\nChaperone(x) ::: x chaperones high school dances.\nStudent(x) ::: x is a student who attends the school.\nYoung(x) ::: x is a young child or teenager who wishes to further their academic career and educational opportunities.\nPremises:\n∀x (Perform(x) → Attend(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n∀x (Perform(x) ⊕ Inactive(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n∀x (Chaperone(x) → ¬Student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n∀x (Inactive(x) → Chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n∀x (Young(x) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Attend(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nConclusion:\n((Young(bonnie) ∧ Chaperone(bonnie)) ⊕ ¬(Young(bonnie) ∨ Chaperone(bonnie))) → (Student(bonnie) ⊕ Inactive(bonnie)) ::: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."
    ],
    "CSP": [
      "Domain:\n1: leftmost\n5: rightmost\nVariables:\ngreen_book [IN] [1, 2, 3, 4, 5]\nblue_book [IN] [1, 2, 3, 4, 5]\nwhite_book [IN] [1, 2, 3, 4, 5]\npurple_book [IN] [1, 2, 3, 4, 5]\nyellow_book [IN] [1, 2, 3, 4, 5]\nConstraints:\nblue_book > yellow_book ::: The blue book is to the right of the yellow book.\nwhite_book < yellow_book ::: The white book is to the left of the yellow book.\nblue_book == 4 ::: The blue book is the second from the right.\npurple_book == 2 ::: The purple book is the second from the left.\nAllDifferentConstraint([green_book, blue_book, white_book, purple_book, yellow_book]) ::: All books have different values.\nQuery:\nA) green_book == 2 ::: The green book is the second from the left.\nB) blue_book == 2 ::: The blue book is the second from the left.\nC) white_book == 2 ::: The white book is the second from the left.\nD) purple_book == 2 ::: The purple book is the second from the left.\nE) yellow_book == 2 ::: The yellow book is the second from the left."
    ],
    "SAT": [
      "# Declarations\nchildren = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([children] -> [lockers])\n\n# Constraints\nForAll([l:lockers], Or(Count([c:children], assigned(c) == l) == 1, And(Count([c:children], assigned(c) == l) == 2, Exists([b:boys, g:girls], And(assigned(b) == l, assigned(g) == l))))) ::: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker\nExists([c:children], assigned(Juan) == assigned(c)) ::: Juan must share a locker\nForAll([c:children], assigned(Rachel) != assigned(c)) ::: Rachel cannot share a locker\nForAll([l:lockers], Implies(assigned(Nita) == l, And(assigned(Trisha) != l, assigned(Trisha) != l+1, assigned(Trisha) != l-1))) ::: Nita's locker cannot be adjacent to Trisha's locker\nassigned(Fred) == 3 ::: Fred must be assigned to locker 3\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?\nis_accurate_list([Exists([c:children], assigned(Fred) == assigned(c)), Exists([c:children], assigned(Juan) == assigned(c))]) ::: (A)\nis_accurate_list([Exists([c:children], assigned(Juan) == assigned(c)), Exists([c:children], assigned(Paul) == assigned(c))]) ::: (B)\nis_accurate_list([Exists([c:children], assigned(Juan) == assigned(c)), Exists([c:children], assigned(Marc) == assigned(c)), Exists([c:children], assigned(Paul) == assigned(c))]) ::: (C)\nis_accurate_list([Exists([c:children], assigned(Juan) == assigned(c)), Exists([c:children], assigned(Marc) == assigned(c)), Exists([c:children], assigned(Trisha) == assigned(c))]) ::: (D)\nis_accurate_list([Exists([c:children], assigned(Juan) == assigned(c)), Exists([c:children], assigned(Nita) == assigned(c)), Exists([c:children], assigned(Trisha) == assigned(c))]) ::: (E)"
    ]
  },
  {
    "id": "002",
    "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
    "question": "If the four boys are assigned to consecutively numbered lockers and Juan is assigned to locker 5, then which one of the following is a complete and accurate list of lockers each of which CANNOT be a shared locker?",
    "answer": "D",
    "options": [
      "A) locker 2",
      "B) locker 4",
      "C) locker 1, locker 2",
      "D) locker 1, locker 4",
      "E) locker 2, locker 4"
    ],
    "LP": [
      "# Declarations\nboys = EnumSort([Fred, Juan, Marc, Paul])\ngirls = EnumSort([Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([boys + girls, lockers] -> [bool])\nshared = Function([boys, girls, lockers] -> [bool])\n\n# Constraints\nForAll([b:boys], Exists([l:lockers], assigned(b, l))) ::: each child must be assigned to exactly one locker\nForAll([l:lockers], Implies(assigned(Juan, l), shared(Juan, _, l))) ::: Juan must share a locker\nForAll([l:lockers], Implies(assigned(Rachel, l), Not(shared(_, Rachel, l)))) ::: Rachel cannot share a locker\nForAll([l1:lockers, l2:lockers], Implies(assigned(Nita, l1) and assigned(Trisha, l2), Abs(l1 - l2) > 1)) ::: Nita's locker cannot be adjacent to Trisha's locker\nassigned(Fred, 3) ::: Fred must be assigned to locker 3\n\n# Options\nQuestion ::: If the four boys are assigned to consecutively numbered lockers and Juan is assigned to locker 5, then which one of the following is a complete and accurate list of lockers each of which CANNOT be a shared locker?\nis_exception(is_sat(And(assigned(Fred, 1), assigned(Marc, 2), assigned(Paul, 3), assigned(Juan, 5)))) ::: (A)\nis_exception(is_sat(And(assigned(Fred, 1), assigned(Marc, 2), assigned(Paul, 3), assigned(Juan, 4)))) ::: (B)\nis_exception(is_sat(And(assigned(Fred, 1), assigned(Marc, 2)))) ::: (C)\nis_exception(is_sat(And(assigned(Fred, 1), assigned(Marc, 3)))) ::: (D)\nis_exception(is_sat(And(assigned(Fred, 1), assigned(Marc, 2), assigned(Paul, 3)))) ::: (E)"
    ],
    "FOL": [
      "Predicates:\nPerform(x) ::: x performs in school talent shows often.\nAttend(x) ::: x attends and is very engaged with school events.\nInactive(x) ::: x is an inactive and disinterested member of their community.\nChaperone(x) ::: x chaperones high school dances.\nStudent(x) ::: x is a student who attends the school.\nYoung(x) ::: x is a young child or teenager who wishes to further their academic career and educational opportunities.\nPremises:\n∀x (Perform(x) → Attend(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n∀x (Perform(x) ⊕ Inactive(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n∀x (Chaperone(x) → ¬Student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n∀x (Inactive(x) → Chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n∀x (Young(x) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Attend(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nConclusion:\n((Young(bonnie) ∧ Chaperone(bonnie)) ⊕ ¬(Young(bonnie) ∨ Chaperone(bonnie))) → (Student(bonnie) ⊕ Inactive(bonnie)) ::: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."
    ],
    "CSP": [
      "Domain:\n1: leftmost\n5: rightmost\nVariables:\ngreen_book [IN] [1, 2, 3, 4, 5]\nblue_book [IN] [1, 2, 3, 4, 5]\nwhite_book [IN] [1, 2, 3, 4, 5]\npurple_book [IN] [1, 2, 3, 4, 5]\nyellow_book [IN] [1, 2, 3, 4, 5]\nConstraints:\nblue_book > yellow_book ::: The blue book is to the right of the yellow book.\nwhite_book < yellow_book ::: The white book is to the left of the yellow book.\nblue_book == 4 ::: The blue book is the second from the right.\npurple_book == 2 ::: The purple book is the second from the left.\nAllDifferentConstraint([green_book, blue_book, white_book, purple_book, yellow_book]) ::: All books have different values.\nQuery:\nA) green_book == 2 ::: The green book is the second from the left.\nB) blue_book == 2 ::: The blue book is the second from the left.\nC) white_book == 2 ::: The white book is the second from the left.\nD) purple_book == 2 ::: The purple book is the second from the left.\nE) yellow_book == 2 ::: The yellow book is the second from the left."
    ],
    "SAT": [
      "# Declarations\nchildren = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([children] -> [lockers])\n\n# Constraints\nForAll([l:lockers], Or(Count([c:children], assigned(c) == l) == 1, And(Count([c:children], assigned(c) == l) == 2, Exists([b:boys, g:girls], And(assigned(b) == l, assigned(g) == l))))) ::: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker\nExists([c:children], assigned(Juan) == assigned(c)) ::: Juan must share a locker\nForAll([c:children], assigned(Rachel) != assigned(c)) ::: Rachel cannot share a locker\nForAll([l:lockers], Implies(assigned(Nita) == l, And(assigned(Trisha) != l, assigned(Trisha) != l+1, assigned(Trisha) != l-1))) ::: Nita's locker cannot be adjacent to Trisha's locker\nassigned(Fred) == 3 ::: Fred must be assigned to locker 3\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?\nis_accurate_list([Exists([c:children], assigned(Fred) == assigned(c)), Exists([c:children], assigned(Juan) == assigned(c))]) ::: (A)\nis_accurate_list([Exists([c:children], assigned(Juan) == assigned(c)), Exists([c:children], assigned(Paul) == assigned(c))]) ::: (B)\nis_accurate_list([Exists([c:children], assigned(Juan) == assigned(c)), Exists([c:children], assigned(Marc) == assigned(c)), Exists([c:children], assigned(Paul) == assigned(c))]) ::: (C)\nis_accurate_list([Exists([c:children], assigned(Juan) == assigned(c)), Exists([c:children], assigned(Marc) == assigned(c)), Exists([c:children], assigned(Trisha) == assigned(c))]) ::: (D)\nis_accurate_list([Exists([c:children], assigned(Juan) == assigned(c)), Exists([c:children], assigned(Nita) == assigned(c)), Exists([c:children], assigned(Trisha) == assigned(c))]) ::: (E)"
    ]
  }]